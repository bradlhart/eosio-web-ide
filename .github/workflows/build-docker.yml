name: Build Docker
on:
  schedule:
    - cron: "0 2 * * *"
  workflow_dispatch:

jobs:
  build-docker-v1_8_x:
    name: Build Docker Nodeos v1.8.x
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@f90c7b395dac7c5a277c1a6d93d5057c1cddb74e
        with:
          ref: master
          token: ${{ github.token }}
      - name: Get nodeos
        id: nodeos
        uses: actions/github-script@v3
        with:
          script: |
            const nodeosVersion = 'v1.8.';
            const releaseList = await github.request('GET /repos/{owner}/{repo}/releases', {
              owner: 'eosio',
              repo: 'eos'
            });
            const releases = releaseList.data.map(release => {
              return {
                tag: release.tag_name,
                published_at: new Date(release.published_at),
              };
            })
            .filter(release => release.tag.startsWith(nodeosVersion))
            .sort((a, b) => b.published_at - a.published_at);
            return releases[0].tag;
      - name: Nodeos Tag
        id: nodeos-tag
        run: |
          TAG=$(echo "${NODDEOS_TAG_FROM_JS}" | tr -d '"')
          echo ::set-output name=NODEOS_TAG::${TAG}
        env:
          NODEOS_TAG_FROM_JS: ${{ steps.nodeos.outputs.result }}
      - name: Get CDT Debian
        id: cdt-debian
        uses: actions/github-script@v3
        with:
          script: |
            const cdtVersion = 'v1.6.';
            const releaseList = await github.request('GET /repos/{owner}/{repo}/releases', {
              owner: 'eosio',
              repo: 'eosio.cdt'
            });
            const releases = releaseList.data.map(release => {
              const deb = release.assets.find(asset => asset.name.includes('.deb'));
              return {
                tag: release.tag_name,
                published_at: new Date(release.published_at),
                file: deb ? deb.name : null,
                debianUrl: deb ? deb.browser_download_url : null,
              };
            })
            .filter(release => release.tag.startsWith(cdtVersion))
            .sort((a, b) => b.published_at - a.published_at);
            return releases[0];
      - name: Debian Url
        id: cdt-debian-url
        run: |
          URL=$(echo "${CDT_URL_FROM_JS}" | tr -d '"')
          echo ::set-output name=CDT_DEBIAN_URL::${URL}
        env:
          CDT_URL_FROM_JS: ${{ steps.cdt-debian.outputs.result.debianUrl }}
      - name: Debian File
        id: cdt-debian-file
        run: |
          FILE=$(echo "${CDT_FILE_FROM_JS}" | tr -d '"')
          echo ::set-output name=CDT_DEBIAN_FILE::${FILE}
        env:
          CDT_FILE_FROM_JS: ${{ steps.cdt-debian.outputs.result.file }}
      - name: Get contracts
        id: contracts
        uses: actions/github-script@v3
        with:
          script: |
            const contractsVersion = 'v1.8.';
            const releaseList = await github.request('GET /repos/{owner}/{repo}/releases', {
              owner: 'eosio',
              repo: 'eosio.contracts'
            });
            const releases = releaseList.data.map(release => {
              return {
                tag: release.tag_name,
                published_at: new Date(release.published_at),
              };
            })
            .filter(release => release.tag.startsWith(contractsVersion))
            .sort((a, b) => b.published_at - a.published_at);
            return releases[0].tag;
      - name: Contracts Tag
        id: contracts-tag
        run: |
          TAG=$(echo "${CONTRACTS_TAG_FROM_JS}" | tr -d '"')
          echo ::set-output name=CONTRACTS_TAG::${TAG}
        env:
          CONTRACTS_TAG_FROM_JS: ${{ steps.contracts.outputs.result }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@6520a2d2cb6db42c90c297c8025839c98e531268
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@154c24e1f33dbb5865a021c99f1318cfebf27b32
      - name: Login to DockerHub
        uses: docker/login-action@f3364599c6aa293cdc2b8391b1b56d0c30e45c8a
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@4a531fa5a603bab87dfa56578bd82b28508c9547
        with:
          context: ./.github/docker
          file: ./.github/docker/Dockerfile
          pull: true
          push: true
          no-cache: true
          build-args: |
            EOSBRANCH=${{ steps.nodeos-tag.outputs.NODEOS_TAG }}
            CDTURL=${{ steps.cdt-debian-url.outputs.CDT_DEBIAN_URL }}
            CDTFILE=${{ steps.cdt-debian-file.outputs.CDT_DEBIAN_FILE }}
            CONTRACTSBRANCH=${{ steps.contracts-tag.outputs.CONTRACTS_TAG }}
          tags: |
            bradlhart/eosio-web-ide:v1.8.x
